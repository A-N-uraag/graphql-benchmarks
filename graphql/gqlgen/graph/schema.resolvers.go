package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"example.com/gqlgen-users/graph/model"
)

var proxyURL = &url.URL{
	Scheme: "http", // or "https" if your proxy is using HTTPS
	Host:   "localhost:8080",
}
var client = &http.Client{
	Transport: &http.Transport{
		Proxy: http.ProxyURL(proxyURL), // Set the proxy URL
	},
}
// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	// Create a GET request
	req, err := http.NewRequest("GET", "http://jsonplaceholder.typicode.com/users", nil)
	if err != nil {
		return nil, err
	}

	// Send the request using the client
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	// // Fetch the list of users
	// resp, err := http.Get("http://localhost:8080/users")
	// if err != nil {
	// 	return nil, err
	// }
	defer resp.Body.Close()

	var users []*model.User
	if err := json.NewDecoder(resp.Body).Decode(&users); err != nil {
		return nil, err
	}

	return users, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	client := &http.Client{
		Transport: &http.Transport{
			Proxy: http.ProxyURL(proxyURL), // Set the proxy URL
		},
	}
	// Create a GET request
	req, err := http.NewRequest("GET", "http://jsonplaceholder.typicode.com/posts", nil)
	
	if err != nil {
		return nil, err
	}

	// Send the request using the client
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	// // Fetch the list of posts
	// resp, err := http.Get("http://localhost:8080/posts")
	// if err != nil {
	// 	return nil, err
	// }
	defer resp.Body.Close()
	var posts []*model.Post
	if err := json.NewDecoder(resp.Body).Decode(&posts); err != nil {
		return nil, err
	}

	return posts, nil
}

// Posts is the resolver for the posts field.
func (r *userResolver) Posts(ctx context.Context, obj *model.User) ([]*model.Post, error) {
	client := &http.Client{
		Transport: &http.Transport{
			Proxy: http.ProxyURL(proxyURL), // Set the proxy URL
		},
	}
	// Create a GET request
	req, err := http.NewRequest("GET", fmt.Sprintf("http://jsonplaceholder.typicode.com/users/%d/posts", obj.ID), nil)
	if err != nil {
		return nil, err
	}

	// Send the request using the client
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	// // Fetch the posts for a user from "/users/:userId/posts"
	// resp, err := http.Get(fmt.Sprintf("http://localhost:8080/users/%d/posts", obj.ID))
	// if err != nil {
	// 	return nil, err
	// }
	defer resp.Body.Close()

	var posts []*model.Post
	if err := json.NewDecoder(resp.Body).Decode(&posts); err != nil {
		return nil, err
	}

	return posts, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
